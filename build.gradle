import java.time.LocalDateTime

plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'pl.mojaapka'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


repositories {
    mavenCentral()
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'


    // https://mvnrepository.com/artifact/io.springfox/springfox-swagger2
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'

    // https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'

//  https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-ui
  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.5.10'

//  https://mvnrepository.com/artifact/io.springfox/springfox-boot-starter
//  implementation group: 'io.springfox', name: 'springfox-boot-starter', version: '3.0.0'

//  https://mvnrepository.com/artifact/io.springfox/springfox-bean-validators
//    implementation group: 'io.springfox', name: 'springfox-bean-validators', version: '3.0.0'

    // https://mvnrepository.com/artifact/io.springfox/springfox-swagger-common
//    implementation group: 'io.springfox', name: 'springfox-swagger-common', version: '3.0.0'


    runtimeOnly 'com.h2database:h2'
    compileOnly 'org.projectlombok:lombok'

    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}
test {
    useJUnitPlatform()
}

task generatePostAndComments() {
    doLast {
        File dataSql = file("src/main/resources/data.sql")
        dataSql.write("")
        //posty
        for (int i = 1; i <= 100; i++) {
            dataSql.append("insert into post(id, title, content, created) " +
                    "values (${i}, 'Test post ${i}', 'Content ${i}', '" + LocalDateTime.now().minusDays(100 - i) + "');\n")
        }
        //komentarze
        for (int i = 1; i <= 100; i++) {
            int postId = i + 1 / 10
            dataSql.append("insert into comment(id, post_id, content, created) " +
                    "values (${i}, ${postId}, 'Comment ${i}', '" + LocalDateTime.now().minusDays(100 - i) + "');\n")
        }
    }
}

